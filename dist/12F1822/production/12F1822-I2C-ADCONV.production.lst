

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Mar 10 15:13:22 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 1.41
    19                           ; Generated 25/01/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC12F1822 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0015                     	;# 
    68  0016                     	;# 
    69  0016                     	;# 
    70  0017                     	;# 
    71  0018                     	;# 
    72  0019                     	;# 
    73  001A                     	;# 
    74  001B                     	;# 
    75  001C                     	;# 
    76  001E                     	;# 
    77  001F                     	;# 
    78  008C                     	;# 
    79  0091                     	;# 
    80  0092                     	;# 
    81  0095                     	;# 
    82  0096                     	;# 
    83  0097                     	;# 
    84  0098                     	;# 
    85  0099                     	;# 
    86  009A                     	;# 
    87  009B                     	;# 
    88  009B                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009E                     	;# 
    92  010C                     	;# 
    93  0111                     	;# 
    94  0112                     	;# 
    95  0115                     	;# 
    96  0116                     	;# 
    97  0117                     	;# 
    98  0118                     	;# 
    99  0119                     	;# 
   100  011A                     	;# 
   101  011B                     	;# 
   102  011D                     	;# 
   103  011D                     	;# 
   104  018C                     	;# 
   105  0191                     	;# 
   106  0191                     	;# 
   107  0192                     	;# 
   108  0193                     	;# 
   109  0193                     	;# 
   110  0193                     	;# 
   111  0194                     	;# 
   112  0195                     	;# 
   113  0196                     	;# 
   114  0199                     	;# 
   115  019A                     	;# 
   116  019B                     	;# 
   117  019B                     	;# 
   118  019B                     	;# 
   119  019B                     	;# 
   120  019C                     	;# 
   121  019C                     	;# 
   122  019D                     	;# 
   123  019E                     	;# 
   124  019F                     	;# 
   125  020C                     	;# 
   126  0211                     	;# 
   127  0211                     	;# 
   128  0212                     	;# 
   129  0212                     	;# 
   130  0213                     	;# 
   131  0213                     	;# 
   132  0214                     	;# 
   133  0214                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0215                     	;# 
   137  0216                     	;# 
   138  0216                     	;# 
   139  0217                     	;# 
   140  0217                     	;# 
   141  0291                     	;# 
   142  0291                     	;# 
   143  0292                     	;# 
   144  0293                     	;# 
   145  0294                     	;# 
   146  0295                     	;# 
   147  0295                     	;# 
   148  0296                     	;# 
   149  0391                     	;# 
   150  0392                     	;# 
   151  0393                     	;# 
   152  039A                     	;# 
   153  039C                     	;# 
   154  039D                     	;# 
   155  039E                     	;# 
   156  039F                     	;# 
   157  0FE4                     	;# 
   158  0FE5                     	;# 
   159  0FE6                     	;# 
   160  0FE7                     	;# 
   161  0FE8                     	;# 
   162  0FE9                     	;# 
   163  0FEA                     	;# 
   164  0FEB                     	;# 
   165  0FED                     	;# 
   166  0FEE                     	;# 
   167  0FEF                     	;# 
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  0011                     	;# 
   182  0012                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  008C                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  010C                     	;# 
   209  0111                     	;# 
   210  0112                     	;# 
   211  0115                     	;# 
   212  0116                     	;# 
   213  0117                     	;# 
   214  0118                     	;# 
   215  0119                     	;# 
   216  011A                     	;# 
   217  011B                     	;# 
   218  011D                     	;# 
   219  011D                     	;# 
   220  018C                     	;# 
   221  0191                     	;# 
   222  0191                     	;# 
   223  0192                     	;# 
   224  0193                     	;# 
   225  0193                     	;# 
   226  0193                     	;# 
   227  0194                     	;# 
   228  0195                     	;# 
   229  0196                     	;# 
   230  0199                     	;# 
   231  019A                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019C                     	;# 
   237  019C                     	;# 
   238  019D                     	;# 
   239  019E                     	;# 
   240  019F                     	;# 
   241  020C                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0294                     	;# 
   262  0295                     	;# 
   263  0295                     	;# 
   264  0296                     	;# 
   265  0391                     	;# 
   266  0392                     	;# 
   267  0393                     	;# 
   268  039A                     	;# 
   269  039C                     	;# 
   270  039D                     	;# 
   271  039E                     	;# 
   272  039F                     	;# 
   273  0FE4                     	;# 
   274  0FE5                     	;# 
   275  0FE6                     	;# 
   276  0FE7                     	;# 
   277  0FE8                     	;# 
   278  0FE9                     	;# 
   279  0FEA                     	;# 
   280  0FEB                     	;# 
   281  0FED                     	;# 
   282  0FEE                     	;# 
   283  0FEF                     	;# 
   284  005F                     _GIE	set	95
   285  005E                     _PEIE	set	94
   286  0093                     _BCL1IF	set	147
   287  008B                     _SSP1IF	set	139
   288  009D                     _ADCON0	set	157
   289  009E                     _ADCON1	set	158
   290  008C                     _TRISA	set	140
   291  0095                     _OPTION_REG	set	149
   292  0099                     _OSCCON	set	153
   293  009B                     _ADRESL	set	155
   294  009C                     _ADRESH	set	156
   295  0493                     _BCL1IE	set	1171
   296  048B                     _SSP1IE	set	1163
   297  04E9                     _GO_nDONE	set	1257
   298  018C                     _ANSELA	set	396
   299  0213                     _SSP1MSK	set	531
   300  0212                     _SSP1ADD	set	530
   301  0215                     _SSP1CON1	set	533
   302  0214                     _SSP1STAT	set	532
   303  0216                     _SSP1CON2bits	set	534
   304  0215                     _SSP1CON1bits	set	533
   305  0211                     _SSP1BUF	set	529
   306  0214                     _SSP1STATbits	set	532
   307                           
   308                           ; #config settings
   309  0000                     
   310                           	psect	cinit
   311  0063                     start_initialization:	
   312  0063                     __initialization:	
   313                           
   314                           ; Clear objects allocated to COMMON
   315  0063  01F9               	clrf	__pbssCOMMON& (0+127)
   316  0064  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   317                           
   318                           ; Clear objects allocated to BANK0
   319  0065  3020               	movlw	low __pbssBANK0
   320  0066  0084               	movwf	4
   321  0067  3000               	movlw	high __pbssBANK0
   322  0068  0085               	movwf	5
   323  0069  3012               	movlw	18
   324  006A  2163               	fcall	clear_ram0
   325  006B                     end_of_initialization:	
   326                           ;End of C runtime variable initialization code
   327                           
   328  006B                     __end_of__initialization:	
   329  006B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   330  006C  0020               	movlb	0
   331  006D  286E               	ljmp	_main	;jump to C main() function
   332                           
   333                           	psect	bssCOMMON
   334  0079                     __pbssCOMMON:	
   335  0079                     _Rdtp:	
   336  0079                     	ds	1
   337  007A                     _Sdtp:	
   338  007A                     	ds	1
   339                           
   340                           	psect	bssBANK0
   341  0020                     __pbssBANK0:	
   342  0020                     _rcv_flg:	
   343  0020                     	ds	2
   344  0022                     _snd_data:	
   345  0022                     	ds	8
   346  002A                     _rcv_data:	
   347  002A                     	ds	8
   348                           
   349                           	psect	clrtext
   350  0163                     clear_ram0:	
   351                           ;	Called with FSR0 containing the base address, and
   352                           ;	WREG with the size to clear
   353                           
   354  0163  0064               	clrwdt	;clear the watchdog before getting into this loop
   355  0164                     clrloop0:	
   356  0164  0180               	clrf	0	;clear RAM location pointed to by FSR
   357  0165  3101               	addfsr 0,1
   358  0166  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   359  0167  2964               	goto	clrloop0	;have we reached the end yet?
   360  0168  3400               	retlw	0	;all done for this memory range, return
   361                           
   362                           	psect	cstackCOMMON
   363  0070                     __pcstackCOMMON:	
   364  0070                     ?_main:	
   365  0070                     ?_InterI2C:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ??_InterI2C:	
   369                           ; 1 bytes @ 0x0
   370                           
   371                           
   372                           ; 1 bytes @ 0x0
   373  0070                     	ds	2
   374  0072                     InterI2C@x:	
   375                           
   376                           ; 1 bytes @ 0x2
   377  0072                     	ds	1
   378  0073                     ?_InitI2C_Slave:	
   379  0073                     ?_Delay_ms:	
   380                           ; 1 bytes @ 0x3
   381                           
   382  0073                     ?_I2C_ReceiveCheck:	
   383                           ; 1 bytes @ 0x3
   384                           
   385  0073                     ?_adconv:	
   386                           ; 2 bytes @ 0x3
   387                           
   388  0073                     Delay_ms@DELAY_CNT:	
   389                           ; 2 bytes @ 0x3
   390                           
   391  0073                     InitI2C_Slave@address:	
   392                           ; 2 bytes @ 0x3
   393                           
   394                           
   395                           ; 2 bytes @ 0x3
   396  0073                     	ds	2
   397  0075                     ??_InitI2C_Slave:	
   398  0075                     ??_I2C_ReceiveCheck:	
   399                           ; 1 bytes @ 0x5
   400                           
   401  0075                     ??_Delay_ms:	
   402                           ; 1 bytes @ 0x5
   403                           
   404  0075                     adconv@temp:	
   405                           ; 1 bytes @ 0x5
   406                           
   407  0075                     I2C_ReceiveCheck@ans:	
   408                           ; 2 bytes @ 0x5
   409                           
   410                           
   411                           ; 2 bytes @ 0x5
   412  0075                     	ds	1
   413  0076                     Delay_ms@i:	
   414                           
   415                           ; 2 bytes @ 0x6
   416  0076                     	ds	2
   417  0078                     ??_main:	
   418                           
   419                           ; 1 bytes @ 0x8
   420  0078                     	ds	1
   421                           
   422                           	psect	cstackBANK0
   423  0032                     __pcstackBANK0:	
   424  0032                     ??_adconv:	
   425                           
   426                           ; 1 bytes @ 0x0
   427  0032                     	ds	6
   428  0038                     main@temp2:	
   429                           
   430                           ; 2 bytes @ 0x6
   431  0038                     	ds	2
   432  003A                     main@mode:	
   433                           
   434                           ; 2 bytes @ 0x8
   435  003A                     	ds	2
   436  003C                     main@temp:	
   437                           
   438                           ; 2 bytes @ 0xA
   439  003C                     	ds	2
   440                           
   441                           	psect	maintext
   442  006E                     __pmaintext:	
   443 ;;
   444 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   445 ;;
   446 ;; *************** function _main *****************
   447 ;; Defined at:
   448 ;;		line 64 in file "main.c"
   449 ;; Parameters:    Size  Location     Type
   450 ;;		None
   451 ;; Auto vars:     Size  Location     Type
   452 ;;  temp            2   10[BANK0 ] unsigned int 
   453 ;;  mode            2    8[BANK0 ] int 
   454 ;;  temp2           2    6[BANK0 ] unsigned int 
   455 ;; Return value:  Size  Location     Type
   456 ;;                  1    wreg      void 
   457 ;; Registers used:
   458 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   459 ;; Tracked objects:
   460 ;;		On entry : B1F/0
   461 ;;		On exit  : 0/0
   462 ;;		Unchanged: 0/0
   463 ;; Data sizes:     COMMON   BANK0   BANK1
   464 ;;      Params:         0       0       0
   465 ;;      Locals:         0       6       0
   466 ;;      Temps:          1       0       0
   467 ;;      Totals:         1       6       0
   468 ;;Total ram usage:        7 bytes
   469 ;; Hardware stack levels required when called:    2
   470 ;; This function calls:
   471 ;;		_Delay_ms
   472 ;;		_I2C_ReceiveCheck
   473 ;;		_InitI2C_Slave
   474 ;;		_adconv
   475 ;; This function is called by:
   476 ;;		Startup code after reset
   477 ;; This function uses a non-reentrant model
   478 ;;
   479                           
   480                           
   481                           ;psect for function _main
   482  006E                     _main:	
   483                           
   484                           ;main.c: 65: unsigned int temp,temp2;
   485                           ;main.c: 66: int mode = 0;
   486                           
   487                           ;incstack = 0
   488                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   489  006E  0020               	movlb	0	; select bank0
   490  006F  01BA               	clrf	main@mode
   491  0070  01BB               	clrf	main@mode+1
   492                           
   493                           ;main.c: 68: OSCCON = 0b01110000;
   494  0071  3070               	movlw	112
   495  0072  0021               	movlb	1	; select bank1
   496  0073  0099               	movwf	25	;volatile
   497                           
   498                           ;main.c: 71: OPTION_REG = 0b00000000;
   499  0074  0195               	clrf	21	;volatile
   500                           
   501                           ;main.c: 74: ANSELA = 0b00010001;
   502  0075  3011               	movlw	17
   503  0076  0023               	movlb	3	; select bank3
   504  0077  008C               	movwf	12	;volatile
   505                           
   506                           ;main.c: 77: TRISA = 0b00011111;
   507  0078  301F               	movlw	31
   508  0079  0021               	movlb	1	; select bank1
   509  007A  008C               	movwf	12	;volatile
   510                           
   511                           ;main.c: 81: ADCON1 = 0b10010000;
   512  007B  3090               	movlw	144
   513  007C  009E               	movwf	30	;volatile
   514                           
   515                           ;main.c: 83: ADCON0 = 0b00001101;
   516  007D  300D               	movlw	13
   517  007E  009D               	movwf	29	;volatile
   518                           
   519                           ;main.c: 84: Delay_ms(1);
   520  007F  3001               	movlw	1
   521  0080  00F3               	movwf	Delay_ms@DELAY_CNT
   522  0081  3000               	movlw	0
   523  0082  00F4               	movwf	Delay_ms@DELAY_CNT+1
   524  0083  2137               	fcall	_Delay_ms
   525                           
   526                           ;main.c: 85: InitI2C_Slave(8);
   527  0084  3008               	movlw	8
   528  0085  00F3               	movwf	InitI2C_Slave@address
   529  0086  3000               	movlw	0
   530  0087  00F4               	movwf	InitI2C_Slave@address+1
   531  0088  214E               	fcall	_InitI2C_Slave
   532                           
   533                           ;main.c: 87: Delay_ms(1000) ;
   534  0089  30E8               	movlw	232
   535  008A  00F3               	movwf	Delay_ms@DELAY_CNT
   536  008B  3003               	movlw	3
   537  008C  00F4               	movwf	Delay_ms@DELAY_CNT+1
   538  008D  2137               	fcall	_Delay_ms
   539  008E                     l902:	
   540                           ;main.c: 89: while(1) {
   541                           
   542                           
   543                           ;main.c: 90: if (mode == 0) temp = adconv();
   544  008E  0020               	movlb	0	; select bank0
   545  008F  083A               	movf	main@mode,w
   546  0090  043B               	iorwf	main@mode+1,w
   547  0091  1D03               	btfss	3,2
   548  0092  2899               	goto	l906
   549  0093  20FD               	fcall	_adconv
   550  0094  0874               	movf	?_adconv+1,w
   551  0095  0020               	movlb	0	; select bank0
   552  0096  00BD               	movwf	main@temp+1
   553  0097  0873               	movf	?_adconv,w
   554  0098  00BC               	movwf	main@temp
   555  0099                     l906:	
   556                           
   557                           ;main.c: 91: if (mode == 1) {
   558  0099  033A               	decf	main@mode,w
   559  009A  043B               	iorwf	main@mode+1,w
   560  009B  1D03               	btfss	3,2
   561  009C  28C9               	goto	l926
   562                           
   563                           ;main.c: 92: ADCON0 = 0b00000001;
   564  009D  3001               	movlw	1
   565  009E  0021               	movlb	1	; select bank1
   566  009F  009D               	movwf	29	;volatile
   567                           
   568                           ;main.c: 93: Delay_ms(1);
   569  00A0  3001               	movlw	1
   570  00A1  00F3               	movwf	Delay_ms@DELAY_CNT
   571  00A2  3000               	movlw	0
   572  00A3  00F4               	movwf	Delay_ms@DELAY_CNT+1
   573  00A4  2137               	fcall	_Delay_ms
   574                           
   575                           ;main.c: 94: temp = adconv();
   576  00A5  20FD               	fcall	_adconv
   577  00A6  0874               	movf	?_adconv+1,w
   578  00A7  0020               	movlb	0	; select bank0
   579  00A8  00BD               	movwf	main@temp+1
   580  00A9  0873               	movf	?_adconv,w
   581  00AA  00BC               	movwf	main@temp
   582                           
   583                           ;main.c: 96: ADCON0 = 0b00001101;
   584  00AB  300D               	movlw	13
   585  00AC  0021               	movlb	1	; select bank1
   586  00AD  009D               	movwf	29	;volatile
   587                           
   588                           ;main.c: 97: Delay_ms(1);
   589  00AE  3001               	movlw	1
   590  00AF  00F3               	movwf	Delay_ms@DELAY_CNT
   591  00B0  3000               	movlw	0
   592  00B1  00F4               	movwf	Delay_ms@DELAY_CNT+1
   593  00B2  2137               	fcall	_Delay_ms
   594                           
   595                           ;main.c: 98: temp2 = adconv();
   596  00B3  20FD               	fcall	_adconv
   597  00B4  0874               	movf	?_adconv+1,w
   598  00B5  0020               	movlb	0	; select bank0
   599  00B6  00B9               	movwf	main@temp2+1
   600  00B7  0873               	movf	?_adconv,w
   601  00B8  00B8               	movwf	main@temp2
   602                           
   603                           ;main.c: 100: snd_data[0] = temp & 0xFF; snd_data[1] = (temp & 0xFF00) >> 8;
   604  00B9  083C               	movf	main@temp,w
   605  00BA  00F8               	movwf	??_main
   606  00BB  0878               	movf	??_main,w
   607  00BC  00A2               	movwf	_snd_data
   608  00BD  083D               	movf	main@temp+1,w
   609  00BE  00F8               	movwf	??_main
   610  00BF  0878               	movf	??_main,w
   611  00C0  00A3               	movwf	_snd_data+1
   612                           
   613                           ;main.c: 101: snd_data[2] = temp2 & 0xFF; snd_data[3] = (temp2 & 0xFF00) >> 8;
   614  00C1  0838               	movf	main@temp2,w
   615  00C2  00F8               	movwf	??_main
   616  00C3  0878               	movf	??_main,w
   617  00C4  00A4               	movwf	_snd_data+2
   618  00C5  0839               	movf	main@temp2+1,w
   619  00C6  00F8               	movwf	??_main
   620  00C7  0878               	movf	??_main,w
   621  00C8  00A5               	movwf	_snd_data+3
   622  00C9                     l926:	
   623                           
   624                           ;main.c: 103: };
   625                           ;main.c: 104: if(I2C_ReceiveCheck() >= 1) {
   626  00C9  2120               	fcall	_I2C_ReceiveCheck
   627  00CA  0874               	movf	?_I2C_ReceiveCheck+1,w
   628  00CB  3A80               	xorlw	128
   629  00CC  00F8               	movwf	??_main
   630  00CD  3080               	movlw	128
   631  00CE  0278               	subwf	??_main,w
   632  00CF  1D03               	skipz
   633  00D0  28D3               	goto	u365
   634  00D1  3001               	movlw	1
   635  00D2  0273               	subwf	?_I2C_ReceiveCheck,w
   636  00D3                     u365:	
   637  00D3  1803               	btfsc	3,0
   638  00D4  28ED               	goto	l946
   639  00D5  288E               	goto	l902
   640  00D6                     l930:	
   641                           ;main.c: 106: case 0xA0: ADCON0 = 0b00000001;
   642                           
   643                           ;main.c: 105: switch(rcv_data[0]) {
   644                           
   645  00D6  3001               	movlw	1
   646  00D7  28D9               	goto	L1
   647  00D8                     l934:	
   648                           ;main.c: 109: case 0xA4: ADCON0 = 0b00001101;
   649                           
   650                           ;main.c: 108: break;
   651                           
   652                           ;main.c: 107: mode = 0;
   653                           
   654  00D8  300D               	movlw	13
   655  00D9                     L1:	
   656  00D9  0021               	movlb	1	; select bank1
   657  00DA  009D               	movwf	29	;volatile
   658                           
   659                           ;main.c: 110: mode = 0;
   660  00DB  0020               	movlb	0	; select bank0
   661  00DC  01BA               	clrf	main@mode
   662  00DD  01BB               	clrf	main@mode+1
   663                           
   664                           ;main.c: 111: break;
   665  00DE  288E               	goto	l902
   666  00DF                     l938:	
   667                           ;main.c: 112: case 0xAA:
   668                           
   669                           
   670                           ;main.c: 113: mode = 1;
   671  00DF  3001               	movlw	1
   672  00E0  00BA               	movwf	main@mode
   673  00E1  3000               	movlw	0
   674  00E2  00BB               	movwf	main@mode+1
   675                           
   676                           ;main.c: 114: break;
   677  00E3  288E               	goto	l902
   678  00E4                     l940:	
   679                           ;main.c: 116: case 0xAD: snd_data[0] = temp & 0xFF; snd_data[1] = (temp & 0xFF00) >> 8; 
      +                          break;
   680                           
   681  00E4  083C               	movf	main@temp,w
   682  00E5  00F8               	movwf	??_main
   683  00E6  0878               	movf	??_main,w
   684  00E7  00A2               	movwf	_snd_data
   685  00E8  083D               	movf	main@temp+1,w
   686  00E9  00F8               	movwf	??_main
   687  00EA  0878               	movf	??_main,w
   688  00EB  00A3               	movwf	_snd_data+1
   689                           
   690                           ;main.c: 117: };
   691  00EC  288E               	goto	l902
   692  00ED                     l946:	
   693  00ED  0020               	movlb	0	; select bank0
   694  00EE  082A               	movf	_rcv_data,w
   695                           
   696                           ; Switch size 1, requested type "space"
   697                           ; Number of cases is 4, Range of values is 160 to 173
   698                           ; switch strategies available:
   699                           ; Name         Instructions Cycles
   700                           ; simple_byte           13     7 (average)
   701                           ; direct_byte           37     9 (fixed)
   702                           ; jumptable            263     9 (fixed)
   703                           ;	Chosen strategy is simple_byte
   704  00EF  3AA0               	xorlw	160	; case 160
   705  00F0  1903               	skipnz
   706  00F1  28D6               	goto	l930
   707  00F2  3A04               	xorlw	4	; case 164
   708  00F3  1903               	skipnz
   709  00F4  28D8               	goto	l934
   710  00F5  3A0E               	xorlw	14	; case 170
   711  00F6  1903               	skipnz
   712  00F7  28DF               	goto	l938
   713  00F8  3A07               	xorlw	7	; case 173
   714  00F9  1903               	skipnz
   715  00FA  28E4               	goto	l940
   716  00FB  288E               	goto	l902
   717                           
   718                           ;main.c: 118: };
   719  00FC  288E               	goto	l902
   720  00FD                     __end_of_main:	
   721                           
   722                           	psect	text1
   723  00FD                     __ptext1:	
   724 ;; *************** function _adconv *****************
   725 ;; Defined at:
   726 ;;		line 54 in file "main.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;		None
   729 ;; Auto vars:     Size  Location     Type
   730 ;;  temp            2    5[COMMON] unsigned int 
   731 ;; Return value:  Size  Location     Type
   732 ;;                  2    3[COMMON] unsigned int 
   733 ;; Registers used:
   734 ;;		wreg
   735 ;; Tracked objects:
   736 ;;		On entry : 0/0
   737 ;;		On exit  : 0/0
   738 ;;		Unchanged: 0/0
   739 ;; Data sizes:     COMMON   BANK0   BANK1
   740 ;;      Params:         2       0       0
   741 ;;      Locals:         2       0       0
   742 ;;      Temps:          0       6       0
   743 ;;      Totals:         4       6       0
   744 ;;Total ram usage:       10 bytes
   745 ;; Hardware stack levels used:    1
   746 ;; Hardware stack levels required when called:    1
   747 ;; This function calls:
   748 ;;		Nothing
   749 ;; This function is called by:
   750 ;;		_main
   751 ;; This function uses a non-reentrant model
   752 ;;
   753                           
   754                           
   755                           ;psect for function _adconv
   756  00FD                     _adconv:	
   757                           
   758                           ;main.c: 55: unsigned int temp;
   759                           ;main.c: 57: GO_nDONE = 1;
   760                           
   761                           ;incstack = 0
   762                           ; Regs used in _adconv: [wreg]
   763  00FD  0021               	movlb	1	; select bank1
   764  00FE  149D               	bsf	29,1	;volatile
   765  00FF                     l37:	
   766                           ;main.c: 58: while(GO_nDONE);
   767                           
   768  00FF  189D               	btfsc	29,1	;volatile
   769  0100  28FF               	goto	l37
   770                           
   771                           ;main.c: 59: temp = ADRESH;
   772  0101  081C               	movf	28,w	;volatile
   773  0102  0020               	movlb	0	; select bank0
   774  0103  00B2               	movwf	??_adconv
   775  0104  01B3               	clrf	??_adconv+1
   776  0105  0832               	movf	??_adconv,w
   777  0106  00F5               	movwf	adconv@temp
   778  0107  0833               	movf	??_adconv+1,w
   779  0108  00F6               	movwf	adconv@temp+1
   780                           
   781                           ;main.c: 60: temp = (temp << 8) | ADRESL;
   782  0109  0021               	movlb	1	; select bank1
   783  010A  081B               	movf	27,w	;volatile
   784  010B  0020               	movlb	0	; select bank0
   785  010C  00B2               	movwf	??_adconv
   786  010D  01B3               	clrf	??_adconv+1
   787  010E  0875               	movf	adconv@temp,w
   788  010F  00B5               	movwf	??_adconv+3
   789  0110  01B4               	clrf	??_adconv+2
   790  0111  0832               	movf	??_adconv,w
   791  0112  0434               	iorwf	??_adconv+2,w
   792  0113  00B6               	movwf	??_adconv+4
   793  0114  0833               	movf	??_adconv+1,w
   794  0115  0435               	iorwf	??_adconv+3,w
   795  0116  00B7               	movwf	??_adconv+5
   796  0117  0836               	movf	??_adconv+4,w
   797  0118  00F5               	movwf	adconv@temp
   798  0119  0837               	movf	??_adconv+5,w
   799  011A  00F6               	movwf	adconv@temp+1
   800                           
   801                           ;main.c: 61: return temp;
   802  011B  0876               	movf	adconv@temp+1,w
   803  011C  00F4               	movwf	?_adconv+1
   804  011D  0875               	movf	adconv@temp,w
   805  011E  00F3               	movwf	?_adconv
   806  011F  0008               	return
   807  0120                     __end_of_adconv:	
   808                           
   809                           	psect	text2
   810  014E                     __ptext2:	
   811 ;; *************** function _InitI2C_Slave *****************
   812 ;; Defined at:
   813 ;;		line 91 in file "skI2Cslave.c"
   814 ;; Parameters:    Size  Location     Type
   815 ;;  address         2    3[COMMON] int 
   816 ;; Auto vars:     Size  Location     Type
   817 ;;		None
   818 ;; Return value:  Size  Location     Type
   819 ;;                  1    wreg      void 
   820 ;; Registers used:
   821 ;;		wreg, status,2, status,0
   822 ;; Tracked objects:
   823 ;;		On entry : 0/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMMON   BANK0   BANK1
   827 ;;      Params:         2       0       0
   828 ;;      Locals:         0       0       0
   829 ;;      Temps:          0       0       0
   830 ;;      Totals:         2       0       0
   831 ;;Total ram usage:        2 bytes
   832 ;; Hardware stack levels used:    1
   833 ;; Hardware stack levels required when called:    1
   834 ;; This function calls:
   835 ;;		Nothing
   836 ;; This function is called by:
   837 ;;		_main
   838 ;; This function uses a non-reentrant model
   839 ;;
   840                           
   841                           
   842                           ;psect for function _InitI2C_Slave
   843  014E                     _InitI2C_Slave:	
   844                           
   845                           ;skI2Cslave.c: 93: SSP1STAT= 0b10000000 ;
   846                           
   847                           ;incstack = 0
   848                           ; Regs used in _InitI2C_Slave: [wreg+status,2+status,0]
   849  014E  3080               	movlw	128
   850  014F  0024               	movlb	4	; select bank4
   851  0150  0094               	movwf	20	;volatile
   852                           
   853                           ;skI2Cslave.c: 94: SSP1CON1= 0b00100110 ;
   854  0151  3026               	movlw	38
   855  0152  0095               	movwf	21	;volatile
   856                           
   857                           ;skI2Cslave.c: 95: SSP1CON2bits.SEN = 1;
   858  0153  1416               	bsf	22,0	;volatile
   859                           
   860                           ;skI2Cslave.c: 97: SSP1ADD = address<<1 ;
   861  0154  3573               	lslf	InitI2C_Slave@address,w
   862  0155  0092               	movwf	18	;volatile
   863                           
   864                           ;skI2Cslave.c: 98: SSP1MSK = 0b11111110 ;
   865  0156  30FE               	movlw	254
   866  0157  0093               	movwf	19	;volatile
   867                           
   868                           ;skI2Cslave.c: 99: SSP1IE = 1 ;
   869  0158  0021               	movlb	1	; select bank1
   870  0159  1591               	bsf	17,3	;volatile
   871                           
   872                           ;skI2Cslave.c: 100: BCL1IE = 1 ;
   873  015A  1592               	bsf	18,3	;volatile
   874                           
   875                           ;skI2Cslave.c: 101: PEIE = 1 ;
   876  015B  170B               	bsf	11,6	;volatile
   877                           
   878                           ;skI2Cslave.c: 102: GIE = 1 ;
   879  015C  178B               	bsf	11,7	;volatile
   880                           
   881                           ;skI2Cslave.c: 103: SSP1IF = 0 ;
   882  015D  0020               	movlb	0	; select bank0
   883  015E  1191               	bcf	17,3	;volatile
   884                           
   885                           ;skI2Cslave.c: 104: BCL1IF = 0 ;
   886  015F  1192               	bcf	18,3	;volatile
   887                           
   888                           ;skI2Cslave.c: 105: rcv_flg = 0 ;
   889  0160  01A0               	clrf	_rcv_flg
   890  0161  01A1               	clrf	_rcv_flg+1
   891  0162  0008               	return
   892  0163                     __end_of_InitI2C_Slave:	
   893                           
   894                           	psect	text3
   895  0120                     __ptext3:	
   896 ;; *************** function _I2C_ReceiveCheck *****************
   897 ;; Defined at:
   898 ;;		line 113 in file "skI2Cslave.c"
   899 ;; Parameters:    Size  Location     Type
   900 ;;		None
   901 ;; Auto vars:     Size  Location     Type
   902 ;;  ans             2    5[COMMON] int 
   903 ;; Return value:  Size  Location     Type
   904 ;;                  2    3[COMMON] int 
   905 ;; Registers used:
   906 ;;		wreg, status,2, status,0
   907 ;; Tracked objects:
   908 ;;		On entry : 0/0
   909 ;;		On exit  : 0/0
   910 ;;		Unchanged: 0/0
   911 ;; Data sizes:     COMMON   BANK0   BANK1
   912 ;;      Params:         2       0       0
   913 ;;      Locals:         2       0       0
   914 ;;      Temps:          0       0       0
   915 ;;      Totals:         4       0       0
   916 ;;Total ram usage:        4 bytes
   917 ;; Hardware stack levels used:    1
   918 ;; Hardware stack levels required when called:    1
   919 ;; This function calls:
   920 ;;		Nothing
   921 ;; This function is called by:
   922 ;;		_main
   923 ;; This function uses a non-reentrant model
   924 ;;
   925                           
   926                           
   927                           ;psect for function _I2C_ReceiveCheck
   928  0120                     _I2C_ReceiveCheck:	
   929                           
   930                           ;skI2Cslave.c: 114: int ans ;
   931                           ;skI2Cslave.c: 116: ans = 0 ;
   932                           
   933                           ;incstack = 0
   934                           ; Regs used in _I2C_ReceiveCheck: [wreg+status,2+status,0]
   935  0120  01F5               	clrf	I2C_ReceiveCheck@ans
   936  0121  01F6               	clrf	I2C_ReceiveCheck@ans+1
   937                           
   938                           ;skI2Cslave.c: 117: if (rcv_flg != 0) {
   939  0122  0020               	movlb	0	; select bank0
   940  0123  0820               	movf	_rcv_flg,w
   941  0124  0421               	iorwf	_rcv_flg+1,w
   942  0125  1903               	btfsc	3,2
   943  0126  2932               	goto	l776
   944                           
   945                           ;skI2Cslave.c: 118: if ((SSP1STATbits.S==0)&&(SSP1STATbits.P==1)) {
   946  0127  0024               	movlb	4	; select bank4
   947  0128  1D94               	btfss	20,3	;volatile
   948  0129  1E14               	btfss	20,4	;volatile
   949  012A  2932               	goto	l776
   950                           
   951                           ;skI2Cslave.c: 119: ans = rcv_flg ;
   952  012B  0020               	movlb	0	; select bank0
   953  012C  0821               	movf	_rcv_flg+1,w
   954  012D  00F6               	movwf	I2C_ReceiveCheck@ans+1
   955  012E  0820               	movf	_rcv_flg,w
   956  012F  00F5               	movwf	I2C_ReceiveCheck@ans
   957                           
   958                           ;skI2Cslave.c: 120: rcv_flg = 0 ;
   959  0130  01A0               	clrf	_rcv_flg
   960  0131  01A1               	clrf	_rcv_flg+1
   961  0132                     l776:	
   962                           
   963                           ;skI2Cslave.c: 121: }
   964                           ;skI2Cslave.c: 122: }
   965                           ;skI2Cslave.c: 123: return(ans) ;
   966  0132  0876               	movf	I2C_ReceiveCheck@ans+1,w
   967  0133  00F4               	movwf	?_I2C_ReceiveCheck+1
   968  0134  0875               	movf	I2C_ReceiveCheck@ans,w
   969  0135  00F3               	movwf	?_I2C_ReceiveCheck
   970  0136  0008               	return
   971  0137                     __end_of_I2C_ReceiveCheck:	
   972                           
   973                           	psect	text4
   974  0137                     __ptext4:	
   975 ;; *************** function _Delay_ms *****************
   976 ;; Defined at:
   977 ;;		line 39 in file "main.c"
   978 ;; Parameters:    Size  Location     Type
   979 ;;  DELAY_CNT       2    3[COMMON] unsigned int 
   980 ;; Auto vars:     Size  Location     Type
   981 ;;  i               2    6[COMMON] unsigned int 
   982 ;; Return value:  Size  Location     Type
   983 ;;                  1    wreg      void 
   984 ;; Registers used:
   985 ;;		wreg, status,2
   986 ;; Tracked objects:
   987 ;;		On entry : 0/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMMON   BANK0   BANK1
   991 ;;      Params:         2       0       0
   992 ;;      Locals:         2       0       0
   993 ;;      Temps:          1       0       0
   994 ;;      Totals:         5       0       0
   995 ;;Total ram usage:        5 bytes
   996 ;; Hardware stack levels used:    1
   997 ;; Hardware stack levels required when called:    1
   998 ;; This function calls:
   999 ;;		Nothing
  1000 ;; This function is called by:
  1001 ;;		_main
  1002 ;; This function uses a non-reentrant model
  1003 ;;
  1004                           
  1005                           
  1006                           ;psect for function _Delay_ms
  1007  0137                     _Delay_ms:	
  1008                           
  1009                           ;main.c: 40: for (unsigned int i = 0; i < DELAY_CNT; i++) {
  1010                           
  1011                           ;incstack = 0
  1012                           ; Regs used in _Delay_ms: [wreg+status,2]
  1013  0137  01F6               	clrf	Delay_ms@i
  1014  0138  01F7               	clrf	Delay_ms@i+1
  1015  0139                     l31:	
  1016  0139  0874               	movf	Delay_ms@DELAY_CNT+1,w
  1017  013A  0277               	subwf	Delay_ms@i+1,w
  1018  013B  1D03               	skipz
  1019  013C  293F               	goto	u175
  1020  013D  0873               	movf	Delay_ms@DELAY_CNT,w
  1021  013E  0276               	subwf	Delay_ms@i,w
  1022  013F                     u175:	
  1023  013F  1803               	btfsc	3,0
  1024  0140  0008               	return
  1025                           
  1026                           ;main.c: 41: _delay((unsigned long)((1)*(32000000/4000.0)));
  1027  0141  300B               	movlw	11
  1028  0142  00F5               	movwf	??_Delay_ms
  1029  0143  3062               	movlw	98
  1030  0144                     u377:	
  1031  0144  0B89               	decfsz	9,f
  1032  0145  2944               	goto	u377
  1033  0146  0BF5               	decfsz	??_Delay_ms,f
  1034  0147  2944               	goto	u377
  1035  0148  3200               	nop2
  1036  0149  3001               	movlw	1
  1037  014A  07F6               	addwf	Delay_ms@i,f
  1038  014B  3000               	movlw	0
  1039  014C  3DF7               	addwfc	Delay_ms@i+1,f
  1040  014D  2939               	goto	l31
  1041  014E                     __end_of_Delay_ms:	
  1042                           
  1043                           	psect	intentry
  1044  0004                     __pintentry:	
  1045 ;; *************** function _InterI2C *****************
  1046 ;; Defined at:
  1047 ;;		line 28 in file "skI2Cslave.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;		None
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;  x               1    2[COMMON] unsigned char 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMMON   BANK0   BANK1
  1061 ;;      Params:         0       0       0
  1062 ;;      Locals:         1       0       0
  1063 ;;      Temps:          2       0       0
  1064 ;;      Totals:         3       0       0
  1065 ;;Total ram usage:        3 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; This function calls:
  1068 ;;		Nothing
  1069 ;; This function is called by:
  1070 ;;		Interrupt level 1
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074  0004                     _InterI2C:	
  1075                           
  1076                           ;incstack = 0
  1077  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  1078                           
  1079                           ; Regs used in _InterI2C: [wreg+fsr1l+fsr1h+status,2+status,0]
  1080  0005  3180               	pagesel	$
  1081  0006  0020               	movlb	0	; select bank0
  1082  0007  087F               	movf	127,w
  1083  0008  00F1               	movwf	??_InterI2C+1
  1084                           
  1085                           ;skI2Cslave.c: 29: char x ;
  1086                           ;skI2Cslave.c: 34: if (SSP1IF == 1) {
  1087  0009  1D91               	btfss	17,3	;volatile
  1088  000A  285B               	goto	i1l96
  1089                           
  1090                           ;skI2Cslave.c: 35: if (SSP1STATbits.R_nW == 0) {
  1091  000B  0024               	movlb	4	; select bank4
  1092  000C  1914               	btfsc	20,2	;volatile
  1093  000D  282E               	goto	i1l97
  1094                           
  1095                           ;skI2Cslave.c: 37: if (SSP1STATbits.D_nA == 0) {
  1096  000E  1A94               	btfsc	20,5	;volatile
  1097  000F  281C               	goto	i1l848
  1098                           
  1099                           ;skI2Cslave.c: 39: Rdtp = (char *)rcv_data ;
  1100  0010  302A               	movlw	(low (_rcv_data| 0))& (0+255)
  1101  0011  00F0               	movwf	??_InterI2C
  1102  0012  0870               	movf	??_InterI2C,w
  1103  0013  00F9               	movwf	_Rdtp
  1104                           
  1105                           ;skI2Cslave.c: 40: x = SSP1BUF ;
  1106  0014  0811               	movf	17,w	;volatile
  1107  0015  00F0               	movwf	??_InterI2C
  1108  0016  0870               	movf	??_InterI2C,w
  1109  0017  00F2               	movwf	InterI2C@x
  1110                           
  1111                           ;skI2Cslave.c: 41: rcv_flg = 0 ;
  1112  0018  0020               	movlb	0	; select bank0
  1113  0019  01A0               	clrf	_rcv_flg
  1114  001A  01A1               	clrf	_rcv_flg+1
  1115                           
  1116                           ;skI2Cslave.c: 42: } else {
  1117  001B  2855               	goto	L2
  1118  001C                     i1l848:	
  1119                           
  1120                           ;skI2Cslave.c: 44: *Rdtp = SSP1BUF ;
  1121  001C  0024               	movlb	4	; select bank4
  1122  001D  0811               	movf	17,w	;volatile
  1123  001E  00F0               	movwf	??_InterI2C
  1124  001F  0879               	movf	_Rdtp,w
  1125  0020  0086               	movwf	6
  1126  0021  0187               	clrf	7
  1127  0022  0870               	movf	??_InterI2C,w
  1128  0023  0081               	movwf	1
  1129                           
  1130                           ;skI2Cslave.c: 45: Rdtp++ ;
  1131  0024  3001               	movlw	1
  1132  0025  00F0               	movwf	??_InterI2C
  1133  0026  0870               	movf	??_InterI2C,w
  1134  0027  07F9               	addwf	_Rdtp,f
  1135                           
  1136                           ;skI2Cslave.c: 46: rcv_flg++ ;
  1137  0028  3001               	movlw	1
  1138  0029  0020               	movlb	0	; select bank0
  1139  002A  07A0               	addwf	_rcv_flg,f
  1140  002B  3000               	movlw	0
  1141  002C  3DA1               	addwfc	_rcv_flg+1,f
  1142  002D  2855               	goto	L2
  1143  002E                     i1l97:	
  1144                           ;skI2Cslave.c: 50: } else {
  1145                           
  1146                           ;skI2Cslave.c: 49: SSP1CON1bits.CKP = 1 ;
  1147                           
  1148                           ;skI2Cslave.c: 47: }
  1149                           ;skI2Cslave.c: 48: SSP1IF = 0 ;
  1150                           
  1151                           
  1152                           ;skI2Cslave.c: 52: if (SSP1STATbits.BF == 1) {
  1153  002E  1C14               	btfss	20,0	;volatile
  1154  002F  2841               	goto	i1l101
  1155                           
  1156                           ;skI2Cslave.c: 54: Sdtp = (char *)snd_data ;
  1157  0030  3022               	movlw	(low (_snd_data| 0))& (0+255)
  1158  0031  00F0               	movwf	??_InterI2C
  1159  0032  0870               	movf	??_InterI2C,w
  1160  0033  00FA               	movwf	_Sdtp
  1161                           
  1162                           ;skI2Cslave.c: 55: x = SSP1BUF ;
  1163  0034  0811               	movf	17,w	;volatile
  1164  0035  00F0               	movwf	??_InterI2C
  1165  0036  0870               	movf	??_InterI2C,w
  1166  0037  00F2               	movwf	InterI2C@x
  1167  0038                     i1l860:	
  1168                           ;skI2Cslave.c: 56: while((SSP1CON1bits.CKP)|(SSP1STATbits.BF)) ;
  1169                           
  1170  0038  0814               	movf	20,w	;volatile
  1171  0039  3901               	andlw	1
  1172  003A  00F0               	movwf	??_InterI2C
  1173  003B  0E15               	swapf	21,w	;volatile
  1174  003C  3901               	andlw	1
  1175  003D  0470               	iorwf	??_InterI2C,w
  1176  003E  1D03               	btfss	3,2
  1177  003F  2838               	goto	i1l860
  1178  0040  284B               	goto	i1l874
  1179  0041                     i1l101:	
  1180                           ;skI2Cslave.c: 61: } else {
  1181                           
  1182                           ;skI2Cslave.c: 60: SSP1CON1bits.CKP = 1 ;
  1183                           
  1184                           ;skI2Cslave.c: 59: SSP1IF = 0 ;
  1185                           
  1186                           ;skI2Cslave.c: 58: Sdtp++ ;
  1187                           
  1188                           ;skI2Cslave.c: 57: SSP1BUF = *Sdtp ;
  1189                           
  1190                           
  1191                           ;skI2Cslave.c: 63: if (SSP1CON2bits.ACKSTAT==0) {
  1192  0041  1B16               	btfsc	22,6	;volatile
  1193  0042  2859               	goto	i1l106
  1194  0043                     i1l872:	
  1195                           ;skI2Cslave.c: 65: while((SSP1CON1bits.CKP)|(SSP1STATbits.BF)) ;
  1196                           
  1197  0043  0814               	movf	20,w	;volatile
  1198  0044  3901               	andlw	1
  1199  0045  00F0               	movwf	??_InterI2C
  1200  0046  0E15               	swapf	21,w	;volatile
  1201  0047  3901               	andlw	1
  1202  0048  0470               	iorwf	??_InterI2C,w
  1203  0049  1D03               	btfss	3,2
  1204  004A  2843               	goto	i1l872
  1205  004B                     i1l874:	
  1206                           
  1207                           ;skI2Cslave.c: 66: SSP1BUF = *Sdtp ;
  1208  004B  087A               	movf	_Sdtp,w
  1209  004C  0086               	movwf	6
  1210  004D  0187               	clrf	7
  1211  004E  0801               	movf	1,w
  1212  004F  0091               	movwf	17	;volatile
  1213                           
  1214                           ;skI2Cslave.c: 67: Sdtp++ ;
  1215  0050  3001               	movlw	1
  1216  0051  00F0               	movwf	??_InterI2C
  1217  0052  0870               	movf	??_InterI2C,w
  1218  0053  07FA               	addwf	_Sdtp,f
  1219                           
  1220                           ;skI2Cslave.c: 68: SSP1IF = 0 ;
  1221  0054  0020               	movlb	0	; select bank0
  1222  0055                     L2:	
  1223  0055  1191               	bcf	17,3	;volatile
  1224                           
  1225                           ;skI2Cslave.c: 69: SSP1CON1bits.CKP = 1 ;
  1226  0056  0024               	movlb	4	; select bank4
  1227  0057  1615               	bsf	21,4	;volatile
  1228                           
  1229                           ;skI2Cslave.c: 70: } else {
  1230  0058  285B               	goto	i1l96
  1231  0059                     i1l106:	
  1232                           
  1233                           ;skI2Cslave.c: 72: SSP1IF = 0 ;
  1234  0059  0020               	movlb	0	; select bank0
  1235  005A  1191               	bcf	17,3	;volatile
  1236  005B                     i1l96:	
  1237                           
  1238                           ;skI2Cslave.c: 73: }
  1239                           ;skI2Cslave.c: 74: }
  1240                           ;skI2Cslave.c: 75: }
  1241                           ;skI2Cslave.c: 76: }
  1242                           ;skI2Cslave.c: 80: if (BCL1IF == 1) {
  1243  005B  0020               	movlb	0	; select bank0
  1244  005C  1992               	btfsc	18,3	;volatile
  1245                           
  1246                           ;skI2Cslave.c: 81: BCL1IF = 0 ;
  1247  005D  1192               	bcf	18,3	;volatile
  1248  005E  0871               	movf	??_InterI2C+1,w
  1249  005F  00FF               	movwf	127
  1250  0060  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1251  0061  0009               	retfie
  1252  0062                     __end_of_InterI2C:	
  1253  007E                     btemp	set	126	;btemp
  1254  007E                     int$flags	set	126
  1255  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     12      30
    BANK1            32      0       0

Pointer List with Targets:

    Sdtp	PTR unsigned char  size(1) Largest target is 8
		 -> NULL(NULL[0]), snd_data(BANK0[8]), 

    Rdtp	PTR unsigned char  size(1) Largest target is 8
		 -> NULL(NULL[0]), rcv_data(BANK0[8]), 


Critical Paths under _main in COMMON

    _main->_Delay_ms

Critical Paths under _InterI2C in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_adconv

Critical Paths under _InterI2C in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterI2C in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0     694
                                              8 COMMON     1     1      0
                                              6 BANK0      6     6      0
                           _Delay_ms
                   _I2C_ReceiveCheck
                      _InitI2C_Slave
                             _adconv
 ---------------------------------------------------------------------------------
 (1) _adconv                                              10     8      2      68
                                              3 COMMON     4     2      2
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _InitI2C_Slave                                        2     0      2      75
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _I2C_ReceiveCheck                                     4     2      2      24
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Delay_ms                                             5     3      2     258
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _InterI2C                                             3     3      0       2
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_ms
   _I2C_ReceiveCheck
   _InitI2C_Slave
   _adconv

 _InterI2C (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      29       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      C      1E       6       37.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      29       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Mar 10 15:13:22 2017

              __CFG_CP$OFF 0000                         l31 0139                         l37 00FF  
                      l902 008E                        l930 00D6                        l906 0099  
                      l940 00E4                        l934 00D8                        l926 00C9  
                      l776 0132                        l938 00DF                        l946 00ED  
                      _GIE 005F                        u175 013F               __CFG_CPD$OFF 0000  
                      u365 00D3                        u377 0144               __CFG_BORV$LO 0000  
                      wreg 0009               __CFG_IESO$ON 0000               __CFG_LVP$OFF 0000  
                     _PEIE 005E                       i1l96 005B                       i1l97 002E  
             __CFG_WRT$OFF 0000                       _Rdtp 0079                       _Sdtp 007A  
                     _main 006E                       fsr0h 0005                       fsr1h 0007  
                     indf0 0000                       fsr0l 0004                       indf1 0001  
                     fsr1l 0006                       btemp 007E              __CFG_BOREN$ON 0000  
                     start 0062            ??_InitI2C_Slave 0075              __CFG_PLLEN$ON 0000  
                    ?_main 0070              __CFG_WDTE$OFF 0000                      i1l101 0041  
                    i1l106 0059                      i1l860 0038                      i1l872 0043  
                    i1l848 001C                      i1l874 004B                      _TRISA 008C  
            __CFG_PWRTE$ON 0000             __CFG_FCMEN$OFF 0000                      status 0003  
                    wtemp0 007E          Delay_ms@DELAY_CNT 0073           __end_of_Delay_ms 014E  
           __CFG_MCLRE$OFF 0000            __initialization 0063               __end_of_main 00FD  
         __end_of_InterI2C 0062                     ??_main 0078                     _BCL1IE 0493  
                   _BCL1IF 0093                     _ADCON0 009D                     _ADCON1 009E  
                   _ADRESH 009C                     _ADRESL 009B                     _ANSELA 018C  
                   _OSCCON 0099                     _SSP1IE 048B                     _SSP1IF 008B  
                   _adconv 00FD             __CFG_STVREN$ON 0000          ?_I2C_ReceiveCheck 0073  
       ??_I2C_ReceiveCheck 0075    __end_of__initialization 006B             __pcstackCOMMON 0070  
                ?_Delay_ms 0073                 __pbssBANK0 0020                  ?_InterI2C 0070  
               __pmaintext 006E                    ?_adconv 0073                 __pintentry 0004  
               ??_Delay_ms 0075                 adconv@temp 0075                    _SSP1ADD 0212  
                  _SSP1BUF 0211                    _SSP1MSK 0213                 ??_InterI2C 0070  
    __end_of_InitI2C_Slave 0163            __size_of_adconv 0023                    __ptext1 00FD  
                  __ptext2 014E                    __ptext3 0120                    __ptext4 0137  
                  _rcv_flg 0020                    clrloop0 0164       end_of_initialization 006B  
                Delay_ms@i 0076           __CFG_FOSC$INTOSC 0000  __size_of_I2C_ReceiveCheck 0017  
                InterI2C@x 0072             __end_of_adconv 0120        start_initialization 0063  
        __size_of_Delay_ms 0017        I2C_ReceiveCheck@ans 0075          __size_of_InterI2C 005E  
                 ??_adconv 0032                __pbssCOMMON 0079                  ___latbits 0000  
            __pcstackBANK0 0032           _I2C_ReceiveCheck 0120                  clear_ram0 0163  
                 _GO_nDONE 04E9                   _SSP1CON1 0215                   _SSP1STAT 0214  
                main@temp2 0038                   _Delay_ms 0137     __size_of_InitI2C_Slave 0015  
                 _InterI2C 0004               _SSP1CON1bits 0215               _SSP1CON2bits 0216  
            __size_of_main 008F                   _rcv_data 002A                   _snd_data 0022  
                 int$flags 007E              _InitI2C_Slave 014E               _SSP1STATbits 0214  
                 main@mode 003A                   main@temp 003C                   intlevel1 0000  
        __CFG_CLKOUTEN$OFF 0000             ?_InitI2C_Slave 0073   __end_of_I2C_ReceiveCheck 0137  
               _OPTION_REG 0095       InitI2C_Slave@address 0073  
