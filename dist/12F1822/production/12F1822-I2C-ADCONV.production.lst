

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Mar  3 15:23:50 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 1.41
    19                           ; Generated 25/01/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC12F1822 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0015                     	;# 
    68  0016                     	;# 
    69  0016                     	;# 
    70  0017                     	;# 
    71  0018                     	;# 
    72  0019                     	;# 
    73  001A                     	;# 
    74  001B                     	;# 
    75  001C                     	;# 
    76  001E                     	;# 
    77  001F                     	;# 
    78  008C                     	;# 
    79  0091                     	;# 
    80  0092                     	;# 
    81  0095                     	;# 
    82  0096                     	;# 
    83  0097                     	;# 
    84  0098                     	;# 
    85  0099                     	;# 
    86  009A                     	;# 
    87  009B                     	;# 
    88  009B                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009E                     	;# 
    92  010C                     	;# 
    93  0111                     	;# 
    94  0112                     	;# 
    95  0115                     	;# 
    96  0116                     	;# 
    97  0117                     	;# 
    98  0118                     	;# 
    99  0119                     	;# 
   100  011A                     	;# 
   101  011B                     	;# 
   102  011D                     	;# 
   103  011D                     	;# 
   104  018C                     	;# 
   105  0191                     	;# 
   106  0191                     	;# 
   107  0192                     	;# 
   108  0193                     	;# 
   109  0193                     	;# 
   110  0193                     	;# 
   111  0194                     	;# 
   112  0195                     	;# 
   113  0196                     	;# 
   114  0199                     	;# 
   115  019A                     	;# 
   116  019B                     	;# 
   117  019B                     	;# 
   118  019B                     	;# 
   119  019B                     	;# 
   120  019C                     	;# 
   121  019C                     	;# 
   122  019D                     	;# 
   123  019E                     	;# 
   124  019F                     	;# 
   125  020C                     	;# 
   126  0211                     	;# 
   127  0211                     	;# 
   128  0212                     	;# 
   129  0212                     	;# 
   130  0213                     	;# 
   131  0213                     	;# 
   132  0214                     	;# 
   133  0214                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0215                     	;# 
   137  0216                     	;# 
   138  0216                     	;# 
   139  0217                     	;# 
   140  0217                     	;# 
   141  0291                     	;# 
   142  0291                     	;# 
   143  0292                     	;# 
   144  0293                     	;# 
   145  0294                     	;# 
   146  0295                     	;# 
   147  0295                     	;# 
   148  0296                     	;# 
   149  0391                     	;# 
   150  0392                     	;# 
   151  0393                     	;# 
   152  039A                     	;# 
   153  039C                     	;# 
   154  039D                     	;# 
   155  039E                     	;# 
   156  039F                     	;# 
   157  0FE4                     	;# 
   158  0FE5                     	;# 
   159  0FE6                     	;# 
   160  0FE7                     	;# 
   161  0FE8                     	;# 
   162  0FE9                     	;# 
   163  0FEA                     	;# 
   164  0FEB                     	;# 
   165  0FED                     	;# 
   166  0FEE                     	;# 
   167  0FEF                     	;# 
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  0011                     	;# 
   182  0012                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  008C                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  010C                     	;# 
   209  0111                     	;# 
   210  0112                     	;# 
   211  0115                     	;# 
   212  0116                     	;# 
   213  0117                     	;# 
   214  0118                     	;# 
   215  0119                     	;# 
   216  011A                     	;# 
   217  011B                     	;# 
   218  011D                     	;# 
   219  011D                     	;# 
   220  018C                     	;# 
   221  0191                     	;# 
   222  0191                     	;# 
   223  0192                     	;# 
   224  0193                     	;# 
   225  0193                     	;# 
   226  0193                     	;# 
   227  0194                     	;# 
   228  0195                     	;# 
   229  0196                     	;# 
   230  0199                     	;# 
   231  019A                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019C                     	;# 
   237  019C                     	;# 
   238  019D                     	;# 
   239  019E                     	;# 
   240  019F                     	;# 
   241  020C                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0294                     	;# 
   262  0295                     	;# 
   263  0295                     	;# 
   264  0296                     	;# 
   265  0391                     	;# 
   266  0392                     	;# 
   267  0393                     	;# 
   268  039A                     	;# 
   269  039C                     	;# 
   270  039D                     	;# 
   271  039E                     	;# 
   272  039F                     	;# 
   273  0FE4                     	;# 
   274  0FE5                     	;# 
   275  0FE6                     	;# 
   276  0FE7                     	;# 
   277  0FE8                     	;# 
   278  0FE9                     	;# 
   279  0FEA                     	;# 
   280  0FEB                     	;# 
   281  0FED                     	;# 
   282  0FEE                     	;# 
   283  0FEF                     	;# 
   284  005F                     _GIE	set	95
   285  005E                     _PEIE	set	94
   286  0093                     _BCL1IF	set	147
   287  008B                     _SSP1IF	set	139
   288  009D                     _ADCON0	set	157
   289  009E                     _ADCON1	set	158
   290  008C                     _TRISA	set	140
   291  0095                     _OPTION_REG	set	149
   292  0099                     _OSCCON	set	153
   293  009B                     _ADRESL	set	155
   294  009C                     _ADRESH	set	156
   295  0493                     _BCL1IE	set	1171
   296  048B                     _SSP1IE	set	1163
   297  04E9                     _GO_nDONE	set	1257
   298  018C                     _ANSELA	set	396
   299  0213                     _SSP1MSK	set	531
   300  0212                     _SSP1ADD	set	530
   301  0215                     _SSP1CON1	set	533
   302  0214                     _SSP1STAT	set	532
   303  0216                     _SSP1CON2bits	set	534
   304  0215                     _SSP1CON1bits	set	533
   305  0211                     _SSP1BUF	set	529
   306  0214                     _SSP1STATbits	set	532
   307                           
   308                           ; #config settings
   309  0000                     
   310                           	psect	cinit
   311  0063                     start_initialization:	
   312  0063                     __initialization:	
   313                           
   314                           ; Clear objects allocated to COMMON
   315  0063  01F9               	clrf	__pbssCOMMON& (0+127)
   316  0064  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   317                           
   318                           ; Clear objects allocated to BANK0
   319  0065  3020               	movlw	low __pbssBANK0
   320  0066  0084               	movwf	4
   321  0067  3000               	movlw	high __pbssBANK0
   322  0068  0085               	movwf	5
   323  0069  3012               	movlw	18
   324  006A  2121               	fcall	clear_ram0
   325  006B                     end_of_initialization:	
   326                           ;End of C runtime variable initialization code
   327                           
   328  006B                     __end_of__initialization:	
   329  006B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   330  006C  0020               	movlb	0
   331  006D  286E               	ljmp	_main	;jump to C main() function
   332                           
   333                           	psect	bssCOMMON
   334  0079                     __pbssCOMMON:	
   335  0079                     _Rdtp:	
   336  0079                     	ds	1
   337  007A                     _Sdtp:	
   338  007A                     	ds	1
   339                           
   340                           	psect	bssBANK0
   341  0020                     __pbssBANK0:	
   342  0020                     _rcv_flg:	
   343  0020                     	ds	2
   344  0022                     _snd_data:	
   345  0022                     	ds	8
   346  002A                     _rcv_data:	
   347  002A                     	ds	8
   348                           
   349                           	psect	clrtext
   350  0121                     clear_ram0:	
   351                           ;	Called with FSR0 containing the base address, and
   352                           ;	WREG with the size to clear
   353                           
   354  0121  0064               	clrwdt	;clear the watchdog before getting into this loop
   355  0122                     clrloop0:	
   356  0122  0180               	clrf	0	;clear RAM location pointed to by FSR
   357  0123  3101               	addfsr 0,1
   358  0124  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   359  0125  2922               	goto	clrloop0	;have we reached the end yet?
   360  0126  3400               	retlw	0	;all done for this memory range, return
   361                           
   362                           	psect	cstackCOMMON
   363  0070                     __pcstackCOMMON:	
   364  0070                     ?_main:	
   365  0070                     ?_InterI2C:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ??_InterI2C:	
   369                           ; 1 bytes @ 0x0
   370                           
   371                           
   372                           ; 1 bytes @ 0x0
   373  0070                     	ds	2
   374  0072                     InterI2C@x:	
   375                           
   376                           ; 1 bytes @ 0x2
   377  0072                     	ds	1
   378  0073                     ?_InitI2C_Slave:	
   379  0073                     ?_Delay_ms:	
   380                           ; 1 bytes @ 0x3
   381                           
   382  0073                     ?_I2C_ReceiveCheck:	
   383                           ; 1 bytes @ 0x3
   384                           
   385  0073                     ?_adconv:	
   386                           ; 2 bytes @ 0x3
   387                           
   388  0073                     Delay_ms@DELAY_CNT:	
   389                           ; 2 bytes @ 0x3
   390                           
   391  0073                     InitI2C_Slave@address:	
   392                           ; 2 bytes @ 0x3
   393                           
   394                           
   395                           ; 2 bytes @ 0x3
   396  0073                     	ds	2
   397  0075                     ??_InitI2C_Slave:	
   398  0075                     ??_I2C_ReceiveCheck:	
   399                           ; 1 bytes @ 0x5
   400                           
   401  0075                     ??_Delay_ms:	
   402                           ; 1 bytes @ 0x5
   403                           
   404  0075                     adconv@temp:	
   405                           ; 1 bytes @ 0x5
   406                           
   407  0075                     I2C_ReceiveCheck@ans:	
   408                           ; 2 bytes @ 0x5
   409                           
   410                           
   411                           ; 2 bytes @ 0x5
   412  0075                     	ds	1
   413  0076                     Delay_ms@i:	
   414                           
   415                           ; 2 bytes @ 0x6
   416  0076                     	ds	2
   417  0078                     ??_main:	
   418                           
   419                           ; 1 bytes @ 0x8
   420  0078                     	ds	1
   421                           
   422                           	psect	cstackBANK0
   423  0032                     __pcstackBANK0:	
   424  0032                     ??_adconv:	
   425                           
   426                           ; 1 bytes @ 0x0
   427  0032                     	ds	6
   428  0038                     main@temp:	
   429                           
   430                           ; 2 bytes @ 0x6
   431  0038                     	ds	2
   432                           
   433                           	psect	maintext
   434  006E                     __pmaintext:	
   435 ;;
   436 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   437 ;;
   438 ;; *************** function _main *****************
   439 ;; Defined at:
   440 ;;		line 64 in file "main.c"
   441 ;; Parameters:    Size  Location     Type
   442 ;;		None
   443 ;; Auto vars:     Size  Location     Type
   444 ;;  temp            2    6[BANK0 ] unsigned int 
   445 ;; Return value:  Size  Location     Type
   446 ;;                  1    wreg      void 
   447 ;; Registers used:
   448 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   449 ;; Tracked objects:
   450 ;;		On entry : B1F/0
   451 ;;		On exit  : 0/0
   452 ;;		Unchanged: 0/0
   453 ;; Data sizes:     COMMON   BANK0   BANK1
   454 ;;      Params:         0       0       0
   455 ;;      Locals:         0       2       0
   456 ;;      Temps:          1       0       0
   457 ;;      Totals:         1       2       0
   458 ;;Total ram usage:        3 bytes
   459 ;; Hardware stack levels required when called:    2
   460 ;; This function calls:
   461 ;;		_Delay_ms
   462 ;;		_I2C_ReceiveCheck
   463 ;;		_InitI2C_Slave
   464 ;;		_adconv
   465 ;; This function is called by:
   466 ;;		Startup code after reset
   467 ;; This function uses a non-reentrant model
   468 ;;
   469                           
   470                           
   471                           ;psect for function _main
   472  006E                     _main:	
   473                           
   474                           ;main.c: 65: unsigned int temp;
   475                           ;main.c: 67: OSCCON = 0b01110000;
   476                           
   477                           ;incstack = 0
   478                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   479  006E  3070               	movlw	112
   480  006F  0021               	movlb	1	; select bank1
   481  0070  0099               	movwf	25	;volatile
   482                           
   483                           ;main.c: 70: OPTION_REG = 0b00000000;
   484  0071  0195               	clrf	21	;volatile
   485                           
   486                           ;main.c: 73: ANSELA = 0b00010001;
   487  0072  3011               	movlw	17
   488  0073  0023               	movlb	3	; select bank3
   489  0074  008C               	movwf	12	;volatile
   490                           
   491                           ;main.c: 76: TRISA = 0b00011111;
   492  0075  301F               	movlw	31
   493  0076  0021               	movlb	1	; select bank1
   494  0077  008C               	movwf	12	;volatile
   495                           
   496                           ;main.c: 80: ADCON1 = 0b10010000;
   497  0078  3090               	movlw	144
   498  0079  009E               	movwf	30	;volatile
   499                           
   500                           ;main.c: 82: ADCON0 = 0b00001101;
   501  007A  300D               	movlw	13
   502  007B  009D               	movwf	29	;volatile
   503                           
   504                           ;main.c: 83: Delay_ms(1);
   505  007C  3001               	movlw	1
   506  007D  00F3               	movwf	Delay_ms@DELAY_CNT
   507  007E  3000               	movlw	0
   508  007F  00F4               	movwf	Delay_ms@DELAY_CNT+1
   509  0080  20F5               	fcall	_Delay_ms
   510                           
   511                           ;main.c: 84: InitI2C_Slave(8);
   512  0081  3008               	movlw	8
   513  0082  00F3               	movwf	InitI2C_Slave@address
   514  0083  3000               	movlw	0
   515  0084  00F4               	movwf	InitI2C_Slave@address+1
   516  0085  210C               	fcall	_InitI2C_Slave
   517                           
   518                           ;main.c: 86: Delay_ms(1000) ;
   519  0086  30E8               	movlw	232
   520  0087  00F3               	movwf	Delay_ms@DELAY_CNT
   521  0088  3003               	movlw	3
   522  0089  00F4               	movwf	Delay_ms@DELAY_CNT+1
   523  008A  20F5               	fcall	_Delay_ms
   524  008B                     l862:	
   525                           ;main.c: 88: while(1) {
   526                           
   527                           
   528                           ;main.c: 89: temp = adconv();
   529  008B  20BB               	fcall	_adconv
   530  008C  0874               	movf	?_adconv+1,w
   531  008D  0020               	movlb	0	; select bank0
   532  008E  00B9               	movwf	main@temp+1
   533  008F  0873               	movf	?_adconv,w
   534  0090  00B8               	movwf	main@temp
   535                           
   536                           ;main.c: 90: if(I2C_ReceiveCheck() >= 1) {
   537  0091  20DE               	fcall	_I2C_ReceiveCheck
   538  0092  0874               	movf	?_I2C_ReceiveCheck+1,w
   539  0093  3A80               	xorlw	128
   540  0094  00F8               	movwf	??_main
   541  0095  3080               	movlw	128
   542  0096  0278               	subwf	??_main,w
   543  0097  1D03               	skipz
   544  0098  289B               	goto	u305
   545  0099  3001               	movlw	1
   546  009A  0273               	subwf	?_I2C_ReceiveCheck,w
   547  009B                     u305:	
   548  009B  1803               	btfsc	3,0
   549  009C  28AE               	goto	l878
   550  009D  288B               	goto	l862
   551  009E                     l868:	
   552                           ;main.c: 92: case 0xA0: ADCON0 = 0b00000001;
   553                           
   554                           ;main.c: 91: switch(rcv_data[0]) {
   555                           
   556  009E  3001               	movlw	1
   557  009F  28A1               	goto	L1
   558  00A0                     l870:	
   559                           ;main.c: 94: case 0xA4: ADCON0 = 0b00001101;
   560                           
   561                           ;main.c: 93: break;
   562                           
   563  00A0  300D               	movlw	13
   564  00A1                     L1:	
   565  00A1  0021               	movlb	1	; select bank1
   566  00A2  009D               	movwf	29	;volatile
   567                           
   568                           ;main.c: 95: break;
   569  00A3  288B               	goto	l862
   570  00A4                     l872:	
   571                           ;main.c: 96: case 0xAD: snd_data[0] = temp & 0xFF; snd_data[1] = (temp & 0xFF00) >> 8; b
      +                          reak;
   572                           
   573  00A4  0020               	movlb	0	; select bank0
   574  00A5  0838               	movf	main@temp,w
   575  00A6  00F8               	movwf	??_main
   576  00A7  0878               	movf	??_main,w
   577  00A8  00A2               	movwf	_snd_data
   578  00A9  0839               	movf	main@temp+1,w
   579  00AA  00F8               	movwf	??_main
   580  00AB  0878               	movf	??_main,w
   581  00AC  00A3               	movwf	_snd_data+1
   582                           
   583                           ;main.c: 98: };
   584                           
   585                           ;main.c: 97: default: break;
   586  00AD  288B               	goto	l862
   587  00AE                     l878:	
   588  00AE  0020               	movlb	0	; select bank0
   589  00AF  082A               	movf	_rcv_data,w
   590                           
   591                           ; Switch size 1, requested type "space"
   592                           ; Number of cases is 3, Range of values is 160 to 173
   593                           ; switch strategies available:
   594                           ; Name         Instructions Cycles
   595                           ; simple_byte           10     6 (average)
   596                           ; direct_byte           37     9 (fixed)
   597                           ; jumptable            263     9 (fixed)
   598                           ;	Chosen strategy is simple_byte
   599  00B0  3AA0               	xorlw	160	; case 160
   600  00B1  1903               	skipnz
   601  00B2  289E               	goto	l868
   602  00B3  3A04               	xorlw	4	; case 164
   603  00B4  1903               	skipnz
   604  00B5  28A0               	goto	l870
   605  00B6  3A09               	xorlw	9	; case 173
   606  00B7  1903               	skipnz
   607  00B8  28A4               	goto	l872
   608  00B9  288B               	goto	l862
   609                           
   610                           ;main.c: 99: };
   611  00BA  288B               	goto	l862
   612  00BB                     __end_of_main:	
   613                           
   614                           	psect	text1
   615  00BB                     __ptext1:	
   616 ;; *************** function _adconv *****************
   617 ;; Defined at:
   618 ;;		line 54 in file "main.c"
   619 ;; Parameters:    Size  Location     Type
   620 ;;		None
   621 ;; Auto vars:     Size  Location     Type
   622 ;;  temp            2    5[COMMON] unsigned int 
   623 ;; Return value:  Size  Location     Type
   624 ;;                  2    3[COMMON] unsigned int 
   625 ;; Registers used:
   626 ;;		wreg
   627 ;; Tracked objects:
   628 ;;		On entry : 0/0
   629 ;;		On exit  : 0/0
   630 ;;		Unchanged: 0/0
   631 ;; Data sizes:     COMMON   BANK0   BANK1
   632 ;;      Params:         2       0       0
   633 ;;      Locals:         2       0       0
   634 ;;      Temps:          0       6       0
   635 ;;      Totals:         4       6       0
   636 ;;Total ram usage:       10 bytes
   637 ;; Hardware stack levels used:    1
   638 ;; Hardware stack levels required when called:    1
   639 ;; This function calls:
   640 ;;		Nothing
   641 ;; This function is called by:
   642 ;;		_main
   643 ;; This function uses a non-reentrant model
   644 ;;
   645                           
   646                           
   647                           ;psect for function _adconv
   648  00BB                     _adconv:	
   649                           
   650                           ;main.c: 55: unsigned int temp;
   651                           ;main.c: 57: GO_nDONE = 1;
   652                           
   653                           ;incstack = 0
   654                           ; Regs used in _adconv: [wreg]
   655  00BB  0021               	movlb	1	; select bank1
   656  00BC  149D               	bsf	29,1	;volatile
   657  00BD                     l37:	
   658                           ;main.c: 58: while(GO_nDONE);
   659                           
   660  00BD  189D               	btfsc	29,1	;volatile
   661  00BE  28BD               	goto	l37
   662                           
   663                           ;main.c: 59: temp = ADRESH;
   664  00BF  081C               	movf	28,w	;volatile
   665  00C0  0020               	movlb	0	; select bank0
   666  00C1  00B2               	movwf	??_adconv
   667  00C2  01B3               	clrf	??_adconv+1
   668  00C3  0832               	movf	??_adconv,w
   669  00C4  00F5               	movwf	adconv@temp
   670  00C5  0833               	movf	??_adconv+1,w
   671  00C6  00F6               	movwf	adconv@temp+1
   672                           
   673                           ;main.c: 60: temp = (temp << 8) | ADRESL;
   674  00C7  0021               	movlb	1	; select bank1
   675  00C8  081B               	movf	27,w	;volatile
   676  00C9  0020               	movlb	0	; select bank0
   677  00CA  00B2               	movwf	??_adconv
   678  00CB  01B3               	clrf	??_adconv+1
   679  00CC  0875               	movf	adconv@temp,w
   680  00CD  00B5               	movwf	??_adconv+3
   681  00CE  01B4               	clrf	??_adconv+2
   682  00CF  0832               	movf	??_adconv,w
   683  00D0  0434               	iorwf	??_adconv+2,w
   684  00D1  00B6               	movwf	??_adconv+4
   685  00D2  0833               	movf	??_adconv+1,w
   686  00D3  0435               	iorwf	??_adconv+3,w
   687  00D4  00B7               	movwf	??_adconv+5
   688  00D5  0836               	movf	??_adconv+4,w
   689  00D6  00F5               	movwf	adconv@temp
   690  00D7  0837               	movf	??_adconv+5,w
   691  00D8  00F6               	movwf	adconv@temp+1
   692                           
   693                           ;main.c: 61: return temp;
   694  00D9  0876               	movf	adconv@temp+1,w
   695  00DA  00F4               	movwf	?_adconv+1
   696  00DB  0875               	movf	adconv@temp,w
   697  00DC  00F3               	movwf	?_adconv
   698  00DD  0008               	return
   699  00DE                     __end_of_adconv:	
   700                           
   701                           	psect	text2
   702  010C                     __ptext2:	
   703 ;; *************** function _InitI2C_Slave *****************
   704 ;; Defined at:
   705 ;;		line 91 in file "skI2Cslave.c"
   706 ;; Parameters:    Size  Location     Type
   707 ;;  address         2    3[COMMON] int 
   708 ;; Auto vars:     Size  Location     Type
   709 ;;		None
   710 ;; Return value:  Size  Location     Type
   711 ;;                  1    wreg      void 
   712 ;; Registers used:
   713 ;;		wreg, status,2, status,0
   714 ;; Tracked objects:
   715 ;;		On entry : 0/0
   716 ;;		On exit  : 0/0
   717 ;;		Unchanged: 0/0
   718 ;; Data sizes:     COMMON   BANK0   BANK1
   719 ;;      Params:         2       0       0
   720 ;;      Locals:         0       0       0
   721 ;;      Temps:          0       0       0
   722 ;;      Totals:         2       0       0
   723 ;;Total ram usage:        2 bytes
   724 ;; Hardware stack levels used:    1
   725 ;; Hardware stack levels required when called:    1
   726 ;; This function calls:
   727 ;;		Nothing
   728 ;; This function is called by:
   729 ;;		_main
   730 ;; This function uses a non-reentrant model
   731 ;;
   732                           
   733                           
   734                           ;psect for function _InitI2C_Slave
   735  010C                     _InitI2C_Slave:	
   736                           
   737                           ;skI2Cslave.c: 93: SSP1STAT= 0b10000000 ;
   738                           
   739                           ;incstack = 0
   740                           ; Regs used in _InitI2C_Slave: [wreg+status,2+status,0]
   741  010C  3080               	movlw	128
   742  010D  0024               	movlb	4	; select bank4
   743  010E  0094               	movwf	20	;volatile
   744                           
   745                           ;skI2Cslave.c: 94: SSP1CON1= 0b00100110 ;
   746  010F  3026               	movlw	38
   747  0110  0095               	movwf	21	;volatile
   748                           
   749                           ;skI2Cslave.c: 95: SSP1CON2bits.SEN = 1;
   750  0111  1416               	bsf	22,0	;volatile
   751                           
   752                           ;skI2Cslave.c: 97: SSP1ADD = address<<1 ;
   753  0112  3573               	lslf	InitI2C_Slave@address,w
   754  0113  0092               	movwf	18	;volatile
   755                           
   756                           ;skI2Cslave.c: 98: SSP1MSK = 0b11111110 ;
   757  0114  30FE               	movlw	254
   758  0115  0093               	movwf	19	;volatile
   759                           
   760                           ;skI2Cslave.c: 99: SSP1IE = 1 ;
   761  0116  0021               	movlb	1	; select bank1
   762  0117  1591               	bsf	17,3	;volatile
   763                           
   764                           ;skI2Cslave.c: 100: BCL1IE = 1 ;
   765  0118  1592               	bsf	18,3	;volatile
   766                           
   767                           ;skI2Cslave.c: 101: PEIE = 1 ;
   768  0119  170B               	bsf	11,6	;volatile
   769                           
   770                           ;skI2Cslave.c: 102: GIE = 1 ;
   771  011A  178B               	bsf	11,7	;volatile
   772                           
   773                           ;skI2Cslave.c: 103: SSP1IF = 0 ;
   774  011B  0020               	movlb	0	; select bank0
   775  011C  1191               	bcf	17,3	;volatile
   776                           
   777                           ;skI2Cslave.c: 104: BCL1IF = 0 ;
   778  011D  1192               	bcf	18,3	;volatile
   779                           
   780                           ;skI2Cslave.c: 105: rcv_flg = 0 ;
   781  011E  01A0               	clrf	_rcv_flg
   782  011F  01A1               	clrf	_rcv_flg+1
   783  0120  0008               	return
   784  0121                     __end_of_InitI2C_Slave:	
   785                           
   786                           	psect	text3
   787  00DE                     __ptext3:	
   788 ;; *************** function _I2C_ReceiveCheck *****************
   789 ;; Defined at:
   790 ;;		line 113 in file "skI2Cslave.c"
   791 ;; Parameters:    Size  Location     Type
   792 ;;		None
   793 ;; Auto vars:     Size  Location     Type
   794 ;;  ans             2    5[COMMON] int 
   795 ;; Return value:  Size  Location     Type
   796 ;;                  2    3[COMMON] int 
   797 ;; Registers used:
   798 ;;		wreg, status,2, status,0
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMMON   BANK0   BANK1
   804 ;;      Params:         2       0       0
   805 ;;      Locals:         2       0       0
   806 ;;      Temps:          0       0       0
   807 ;;      Totals:         4       0       0
   808 ;;Total ram usage:        4 bytes
   809 ;; Hardware stack levels used:    1
   810 ;; Hardware stack levels required when called:    1
   811 ;; This function calls:
   812 ;;		Nothing
   813 ;; This function is called by:
   814 ;;		_main
   815 ;; This function uses a non-reentrant model
   816 ;;
   817                           
   818                           
   819                           ;psect for function _I2C_ReceiveCheck
   820  00DE                     _I2C_ReceiveCheck:	
   821                           
   822                           ;skI2Cslave.c: 114: int ans ;
   823                           ;skI2Cslave.c: 116: ans = 0 ;
   824                           
   825                           ;incstack = 0
   826                           ; Regs used in _I2C_ReceiveCheck: [wreg+status,2+status,0]
   827  00DE  01F5               	clrf	I2C_ReceiveCheck@ans
   828  00DF  01F6               	clrf	I2C_ReceiveCheck@ans+1
   829                           
   830                           ;skI2Cslave.c: 117: if (rcv_flg != 0) {
   831  00E0  0020               	movlb	0	; select bank0
   832  00E1  0820               	movf	_rcv_flg,w
   833  00E2  0421               	iorwf	_rcv_flg+1,w
   834  00E3  1903               	btfsc	3,2
   835  00E4  28F0               	goto	l752
   836                           
   837                           ;skI2Cslave.c: 118: if ((SSP1STATbits.S==0)&&(SSP1STATbits.P==1)) {
   838  00E5  0024               	movlb	4	; select bank4
   839  00E6  1D94               	btfss	20,3	;volatile
   840  00E7  1E14               	btfss	20,4	;volatile
   841  00E8  28F0               	goto	l752
   842                           
   843                           ;skI2Cslave.c: 119: ans = rcv_flg ;
   844  00E9  0020               	movlb	0	; select bank0
   845  00EA  0821               	movf	_rcv_flg+1,w
   846  00EB  00F6               	movwf	I2C_ReceiveCheck@ans+1
   847  00EC  0820               	movf	_rcv_flg,w
   848  00ED  00F5               	movwf	I2C_ReceiveCheck@ans
   849                           
   850                           ;skI2Cslave.c: 120: rcv_flg = 0 ;
   851  00EE  01A0               	clrf	_rcv_flg
   852  00EF  01A1               	clrf	_rcv_flg+1
   853  00F0                     l752:	
   854                           
   855                           ;skI2Cslave.c: 121: }
   856                           ;skI2Cslave.c: 122: }
   857                           ;skI2Cslave.c: 123: return(ans) ;
   858  00F0  0876               	movf	I2C_ReceiveCheck@ans+1,w
   859  00F1  00F4               	movwf	?_I2C_ReceiveCheck+1
   860  00F2  0875               	movf	I2C_ReceiveCheck@ans,w
   861  00F3  00F3               	movwf	?_I2C_ReceiveCheck
   862  00F4  0008               	return
   863  00F5                     __end_of_I2C_ReceiveCheck:	
   864                           
   865                           	psect	text4
   866  00F5                     __ptext4:	
   867 ;; *************** function _Delay_ms *****************
   868 ;; Defined at:
   869 ;;		line 39 in file "main.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;  DELAY_CNT       2    3[COMMON] unsigned int 
   872 ;; Auto vars:     Size  Location     Type
   873 ;;  i               2    6[COMMON] unsigned int 
   874 ;; Return value:  Size  Location     Type
   875 ;;                  1    wreg      void 
   876 ;; Registers used:
   877 ;;		wreg, status,2
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMMON   BANK0   BANK1
   883 ;;      Params:         2       0       0
   884 ;;      Locals:         2       0       0
   885 ;;      Temps:          1       0       0
   886 ;;      Totals:         5       0       0
   887 ;;Total ram usage:        5 bytes
   888 ;; Hardware stack levels used:    1
   889 ;; Hardware stack levels required when called:    1
   890 ;; This function calls:
   891 ;;		Nothing
   892 ;; This function is called by:
   893 ;;		_main
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897                           
   898                           ;psect for function _Delay_ms
   899  00F5                     _Delay_ms:	
   900                           
   901                           ;main.c: 40: for (unsigned int i = 0; i < DELAY_CNT; i++) {
   902                           
   903                           ;incstack = 0
   904                           ; Regs used in _Delay_ms: [wreg+status,2]
   905  00F5  01F6               	clrf	Delay_ms@i
   906  00F6  01F7               	clrf	Delay_ms@i+1
   907  00F7                     l31:	
   908  00F7  0874               	movf	Delay_ms@DELAY_CNT+1,w
   909  00F8  0277               	subwf	Delay_ms@i+1,w
   910  00F9  1D03               	skipz
   911  00FA  28FD               	goto	u155
   912  00FB  0873               	movf	Delay_ms@DELAY_CNT,w
   913  00FC  0276               	subwf	Delay_ms@i,w
   914  00FD                     u155:	
   915  00FD  1803               	btfsc	3,0
   916  00FE  0008               	return
   917                           
   918                           ;main.c: 41: _delay((unsigned long)((1)*(32000000/4000.0)));
   919  00FF  300B               	movlw	11
   920  0100  00F5               	movwf	??_Delay_ms
   921  0101  3062               	movlw	98
   922  0102                     u317:	
   923  0102  0B89               	decfsz	9,f
   924  0103  2902               	goto	u317
   925  0104  0BF5               	decfsz	??_Delay_ms,f
   926  0105  2902               	goto	u317
   927  0106  3200               	nop2
   928  0107  3001               	movlw	1
   929  0108  07F6               	addwf	Delay_ms@i,f
   930  0109  3000               	movlw	0
   931  010A  3DF7               	addwfc	Delay_ms@i+1,f
   932  010B  28F7               	goto	l31
   933  010C                     __end_of_Delay_ms:	
   934                           
   935                           	psect	intentry
   936  0004                     __pintentry:	
   937 ;; *************** function _InterI2C *****************
   938 ;; Defined at:
   939 ;;		line 28 in file "skI2Cslave.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;		None
   942 ;; Auto vars:     Size  Location     Type
   943 ;;  x               1    2[COMMON] unsigned char 
   944 ;; Return value:  Size  Location     Type
   945 ;;                  1    wreg      void 
   946 ;; Registers used:
   947 ;;		wreg, fsr1l, fsr1h, status,2, status,0
   948 ;; Tracked objects:
   949 ;;		On entry : 0/0
   950 ;;		On exit  : 0/0
   951 ;;		Unchanged: 0/0
   952 ;; Data sizes:     COMMON   BANK0   BANK1
   953 ;;      Params:         0       0       0
   954 ;;      Locals:         1       0       0
   955 ;;      Temps:          2       0       0
   956 ;;      Totals:         3       0       0
   957 ;;Total ram usage:        3 bytes
   958 ;; Hardware stack levels used:    1
   959 ;; This function calls:
   960 ;;		Nothing
   961 ;; This function is called by:
   962 ;;		Interrupt level 1
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966  0004                     _InterI2C:	
   967                           
   968                           ;incstack = 0
   969  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
   970                           
   971                           ; Regs used in _InterI2C: [wreg+fsr1l+fsr1h+status,2+status,0]
   972  0005  3180               	pagesel	$
   973  0006  0020               	movlb	0	; select bank0
   974  0007  087F               	movf	127,w
   975  0008  00F1               	movwf	??_InterI2C+1
   976                           
   977                           ;skI2Cslave.c: 29: char x ;
   978                           ;skI2Cslave.c: 34: if (SSP1IF == 1) {
   979  0009  1D91               	btfss	17,3	;volatile
   980  000A  285B               	goto	i1l94
   981                           
   982                           ;skI2Cslave.c: 35: if (SSP1STATbits.R_nW == 0) {
   983  000B  0024               	movlb	4	; select bank4
   984  000C  1914               	btfsc	20,2	;volatile
   985  000D  282E               	goto	i1l95
   986                           
   987                           ;skI2Cslave.c: 37: if (SSP1STATbits.D_nA == 0) {
   988  000E  1A94               	btfsc	20,5	;volatile
   989  000F  281C               	goto	i1l802
   990                           
   991                           ;skI2Cslave.c: 39: Rdtp = (char *)rcv_data ;
   992  0010  302A               	movlw	(low (_rcv_data| 0))& (0+255)
   993  0011  00F0               	movwf	??_InterI2C
   994  0012  0870               	movf	??_InterI2C,w
   995  0013  00F9               	movwf	_Rdtp
   996                           
   997                           ;skI2Cslave.c: 40: x = SSP1BUF ;
   998  0014  0811               	movf	17,w	;volatile
   999  0015  00F0               	movwf	??_InterI2C
  1000  0016  0870               	movf	??_InterI2C,w
  1001  0017  00F2               	movwf	InterI2C@x
  1002                           
  1003                           ;skI2Cslave.c: 41: rcv_flg = 0 ;
  1004  0018  0020               	movlb	0	; select bank0
  1005  0019  01A0               	clrf	_rcv_flg
  1006  001A  01A1               	clrf	_rcv_flg+1
  1007                           
  1008                           ;skI2Cslave.c: 42: } else {
  1009  001B  2855               	goto	L2
  1010  001C                     i1l802:	
  1011                           
  1012                           ;skI2Cslave.c: 44: *Rdtp = SSP1BUF ;
  1013  001C  0024               	movlb	4	; select bank4
  1014  001D  0811               	movf	17,w	;volatile
  1015  001E  00F0               	movwf	??_InterI2C
  1016  001F  0879               	movf	_Rdtp,w
  1017  0020  0086               	movwf	6
  1018  0021  0187               	clrf	7
  1019  0022  0870               	movf	??_InterI2C,w
  1020  0023  0081               	movwf	1
  1021                           
  1022                           ;skI2Cslave.c: 45: Rdtp++ ;
  1023  0024  3001               	movlw	1
  1024  0025  00F0               	movwf	??_InterI2C
  1025  0026  0870               	movf	??_InterI2C,w
  1026  0027  07F9               	addwf	_Rdtp,f
  1027                           
  1028                           ;skI2Cslave.c: 46: rcv_flg++ ;
  1029  0028  3001               	movlw	1
  1030  0029  0020               	movlb	0	; select bank0
  1031  002A  07A0               	addwf	_rcv_flg,f
  1032  002B  3000               	movlw	0
  1033  002C  3DA1               	addwfc	_rcv_flg+1,f
  1034  002D  2855               	goto	L2
  1035  002E                     i1l95:	
  1036                           ;skI2Cslave.c: 50: } else {
  1037                           
  1038                           ;skI2Cslave.c: 49: SSP1CON1bits.CKP = 1 ;
  1039                           
  1040                           ;skI2Cslave.c: 47: }
  1041                           ;skI2Cslave.c: 48: SSP1IF = 0 ;
  1042                           
  1043                           
  1044                           ;skI2Cslave.c: 52: if (SSP1STATbits.BF == 1) {
  1045  002E  1C14               	btfss	20,0	;volatile
  1046  002F  2841               	goto	i1l99
  1047                           
  1048                           ;skI2Cslave.c: 54: Sdtp = (char *)snd_data ;
  1049  0030  3022               	movlw	(low (_snd_data| 0))& (0+255)
  1050  0031  00F0               	movwf	??_InterI2C
  1051  0032  0870               	movf	??_InterI2C,w
  1052  0033  00FA               	movwf	_Sdtp
  1053                           
  1054                           ;skI2Cslave.c: 55: x = SSP1BUF ;
  1055  0034  0811               	movf	17,w	;volatile
  1056  0035  00F0               	movwf	??_InterI2C
  1057  0036  0870               	movf	??_InterI2C,w
  1058  0037  00F2               	movwf	InterI2C@x
  1059  0038                     i1l814:	
  1060                           ;skI2Cslave.c: 56: while((SSP1CON1bits.CKP)|(SSP1STATbits.BF)) ;
  1061                           
  1062  0038  0814               	movf	20,w	;volatile
  1063  0039  3901               	andlw	1
  1064  003A  00F0               	movwf	??_InterI2C
  1065  003B  0E15               	swapf	21,w	;volatile
  1066  003C  3901               	andlw	1
  1067  003D  0470               	iorwf	??_InterI2C,w
  1068  003E  1D03               	btfss	3,2
  1069  003F  2838               	goto	i1l814
  1070  0040  284B               	goto	i1l828
  1071  0041                     i1l99:	
  1072                           ;skI2Cslave.c: 61: } else {
  1073                           
  1074                           ;skI2Cslave.c: 60: SSP1CON1bits.CKP = 1 ;
  1075                           
  1076                           ;skI2Cslave.c: 59: SSP1IF = 0 ;
  1077                           
  1078                           ;skI2Cslave.c: 58: Sdtp++ ;
  1079                           
  1080                           ;skI2Cslave.c: 57: SSP1BUF = *Sdtp ;
  1081                           
  1082                           
  1083                           ;skI2Cslave.c: 63: if (SSP1CON2bits.ACKSTAT==0) {
  1084  0041  1B16               	btfsc	22,6	;volatile
  1085  0042  2859               	goto	i1l104
  1086  0043                     i1l826:	
  1087                           ;skI2Cslave.c: 65: while((SSP1CON1bits.CKP)|(SSP1STATbits.BF)) ;
  1088                           
  1089  0043  0814               	movf	20,w	;volatile
  1090  0044  3901               	andlw	1
  1091  0045  00F0               	movwf	??_InterI2C
  1092  0046  0E15               	swapf	21,w	;volatile
  1093  0047  3901               	andlw	1
  1094  0048  0470               	iorwf	??_InterI2C,w
  1095  0049  1D03               	btfss	3,2
  1096  004A  2843               	goto	i1l826
  1097  004B                     i1l828:	
  1098                           
  1099                           ;skI2Cslave.c: 66: SSP1BUF = *Sdtp ;
  1100  004B  087A               	movf	_Sdtp,w
  1101  004C  0086               	movwf	6
  1102  004D  0187               	clrf	7
  1103  004E  0801               	movf	1,w
  1104  004F  0091               	movwf	17	;volatile
  1105                           
  1106                           ;skI2Cslave.c: 67: Sdtp++ ;
  1107  0050  3001               	movlw	1
  1108  0051  00F0               	movwf	??_InterI2C
  1109  0052  0870               	movf	??_InterI2C,w
  1110  0053  07FA               	addwf	_Sdtp,f
  1111                           
  1112                           ;skI2Cslave.c: 68: SSP1IF = 0 ;
  1113  0054  0020               	movlb	0	; select bank0
  1114  0055                     L2:	
  1115  0055  1191               	bcf	17,3	;volatile
  1116                           
  1117                           ;skI2Cslave.c: 69: SSP1CON1bits.CKP = 1 ;
  1118  0056  0024               	movlb	4	; select bank4
  1119  0057  1615               	bsf	21,4	;volatile
  1120                           
  1121                           ;skI2Cslave.c: 70: } else {
  1122  0058  285B               	goto	i1l94
  1123  0059                     i1l104:	
  1124                           
  1125                           ;skI2Cslave.c: 72: SSP1IF = 0 ;
  1126  0059  0020               	movlb	0	; select bank0
  1127  005A  1191               	bcf	17,3	;volatile
  1128  005B                     i1l94:	
  1129                           
  1130                           ;skI2Cslave.c: 73: }
  1131                           ;skI2Cslave.c: 74: }
  1132                           ;skI2Cslave.c: 75: }
  1133                           ;skI2Cslave.c: 76: }
  1134                           ;skI2Cslave.c: 80: if (BCL1IF == 1) {
  1135  005B  0020               	movlb	0	; select bank0
  1136  005C  1992               	btfsc	18,3	;volatile
  1137                           
  1138                           ;skI2Cslave.c: 81: BCL1IF = 0 ;
  1139  005D  1192               	bcf	18,3	;volatile
  1140  005E  0871               	movf	??_InterI2C+1,w
  1141  005F  00FF               	movwf	127
  1142  0060  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1143  0061  0009               	retfie
  1144  0062                     __end_of_InterI2C:	
  1145  007E                     btemp	set	126	;btemp
  1146  007E                     int$flags	set	126
  1147  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80      8      26
    BANK1            32      0       0

Pointer List with Targets:

    Sdtp	PTR unsigned char  size(1) Largest target is 8
		 -> NULL(NULL[0]), snd_data(BANK0[8]), 

    Rdtp	PTR unsigned char  size(1) Largest target is 8
		 -> NULL(NULL[0]), rcv_data(BANK0[8]), 


Critical Paths under _main in COMMON

    _main->_Delay_ms

Critical Paths under _InterI2C in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_adconv

Critical Paths under _InterI2C in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterI2C in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     384
                                              8 COMMON     1     1      0
                                              6 BANK0      2     2      0
                           _Delay_ms
                   _I2C_ReceiveCheck
                      _InitI2C_Slave
                             _adconv
 ---------------------------------------------------------------------------------
 (1) _adconv                                              10     8      2      68
                                              3 COMMON     4     2      2
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _InitI2C_Slave                                        2     0      2      75
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _I2C_ReceiveCheck                                     4     2      2      24
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Delay_ms                                             5     3      2     152
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _InterI2C                                             3     3      0       2
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_ms
   _I2C_ReceiveCheck
   _InitI2C_Slave
   _adconv

 _InterI2C (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      25       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      8      1A       6       32.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      25       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Mar  3 15:23:50 2017

              __CFG_CP$OFF 0000                         l31 00F7                         l37 00BD  
                      l752 00F0                        l870 00A0                        l862 008B  
                      l872 00A4                        l868 009E                        l878 00AE  
                      _GIE 005F                        u305 009B                        u155 00FD  
                      u317 0102               __CFG_CPD$OFF 0000               __CFG_BORV$LO 0000  
                      wreg 0009               __CFG_IESO$ON 0000               __CFG_LVP$OFF 0000  
                     _PEIE 005E                       i1l94 005B                       i1l95 002E  
                     i1l99 0041               __CFG_WRT$OFF 0000                       _Rdtp 0079  
                     _Sdtp 007A                       _main 006E                       fsr0h 0005  
                     fsr1h 0007                       indf0 0000                       fsr0l 0004  
                     indf1 0001                       fsr1l 0006                       btemp 007E  
            __CFG_BOREN$ON 0000                       start 0062            ??_InitI2C_Slave 0075  
            __CFG_PLLEN$ON 0000                      ?_main 0070              __CFG_WDTE$OFF 0000  
                    i1l104 0059                      i1l802 001C                      i1l814 0038  
                    i1l826 0043                      i1l828 004B                      _TRISA 008C  
            __CFG_PWRTE$ON 0000             __CFG_FCMEN$OFF 0000                      status 0003  
                    wtemp0 007E          Delay_ms@DELAY_CNT 0073           __end_of_Delay_ms 010C  
           __CFG_MCLRE$OFF 0000            __initialization 0063               __end_of_main 00BB  
         __end_of_InterI2C 0062                     ??_main 0078                     _BCL1IE 0493  
                   _BCL1IF 0093                     _ADCON0 009D                     _ADCON1 009E  
                   _ADRESH 009C                     _ADRESL 009B                     _ANSELA 018C  
                   _OSCCON 0099                     _SSP1IE 048B                     _SSP1IF 008B  
                   _adconv 00BB             __CFG_STVREN$ON 0000          ?_I2C_ReceiveCheck 0073  
       ??_I2C_ReceiveCheck 0075    __end_of__initialization 006B             __pcstackCOMMON 0070  
                ?_Delay_ms 0073                 __pbssBANK0 0020                  ?_InterI2C 0070  
               __pmaintext 006E                    ?_adconv 0073                 __pintentry 0004  
               ??_Delay_ms 0075                 adconv@temp 0075                    _SSP1ADD 0212  
                  _SSP1BUF 0211                    _SSP1MSK 0213                 ??_InterI2C 0070  
    __end_of_InitI2C_Slave 0121            __size_of_adconv 0023                    __ptext1 00BB  
                  __ptext2 010C                    __ptext3 00DE                    __ptext4 00F5  
                  _rcv_flg 0020                    clrloop0 0122       end_of_initialization 006B  
                Delay_ms@i 0076           __CFG_FOSC$INTOSC 0000  __size_of_I2C_ReceiveCheck 0017  
                InterI2C@x 0072             __end_of_adconv 00DE        start_initialization 0063  
        __size_of_Delay_ms 0017        I2C_ReceiveCheck@ans 0075          __size_of_InterI2C 005E  
                 ??_adconv 0032                __pbssCOMMON 0079                  ___latbits 0000  
            __pcstackBANK0 0032           _I2C_ReceiveCheck 00DE                  clear_ram0 0121  
                 _GO_nDONE 04E9                   _SSP1CON1 0215                   _SSP1STAT 0214  
                 _Delay_ms 00F5     __size_of_InitI2C_Slave 0015                   _InterI2C 0004  
             _SSP1CON1bits 0215               _SSP1CON2bits 0216              __size_of_main 004D  
                 _rcv_data 002A                   _snd_data 0022                   int$flags 007E  
            _InitI2C_Slave 010C               _SSP1STATbits 0214                   main@temp 0038  
                 intlevel1 0000          __CFG_CLKOUTEN$OFF 0000             ?_InitI2C_Slave 0073  
 __end_of_I2C_ReceiveCheck 00F5                 _OPTION_REG 0095       InitI2C_Slave@address 0073  
